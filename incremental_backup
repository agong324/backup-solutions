#!/usr/bin/env bash

# Set the source backup directory
src_dir=("/home/spas" "/home/guest" "/root/.bashrc" "/root/.ssh/")

# Set the targer backup directory (note in my case Backup/ is a mountpint)
tgt_dir="/home/spas/Backup"

# Exclude files matching PATTERN (the first two lines belong to my personal exclude list)
exclude=("Backup/")
exclude+=("Downloads/" "mnt/" "tmp/" "spas/vmware/Windows 10 x64/" "guest/Music" "guest/Videos" "output.*")
exclude+=("~PlayOnLinux*" "kdenlive/")
exclude+=(".adobe/" ".apport-ignore.xml" ".bash_history" ".cache/" ".compiz/" ".config/" ".cups/")
exclude+=(".dbus/" ".dmrc" ".gconf/" ".gimp-2.8/" ".gitkraken/" ".gksu.lock" ".gnome/" ".gnupg/" ".gtk-bookmarks" ".gtk-recordmydesktop")
exclude+=(".ICEauthority" ".lesshst" ".local/" ".~lock.script.code*" ".macromedia/" ".mozilla/" ".nano/" ".nv/" ".nvidia-settings-rc")
exclude+=(".pki/" "*.swp" ".sudo_as_admin_successful" ".thumbnails/" ".Trash-1000/")
exclude+=(".ViberPC/" ".vmware/" ".vscode" ".wget-hsts" ".wine/" ".Xauthority" ".xsession-errors*")

# Remove the backups older than 2 months
age=$(date +%F --date='2 months ago')
for i in "$tgt_dir"/*
do
    if [[ -d $i ]] && [[ ${age//-} -ge $(echo "$i" | sed -r 's/^.*([0-9]{4})-([0-9]{2})-([0-9]{2})T.*$/\1\2\3/') ]] 2>/dev/null
    then
        rm -rf "$i"
    fi
done

# Generate a list of source directories from the array
# 'eval' is essential to use a variable as command or option
src_dir=$(printf -- '"%s" ' "${src_dir[@]}")

# Generate a list with exclude options from the array
# --exclude=PATTERN :Exclude files matching PATTERN
exclude=$(printf -- "--exclude '%s' " "${exclude[@]}")

# Create the backup directory if doesn't exist
[[ ! -d $tgt_dir ]] && mkdir -p "$tgt_dir"

# current backup directory, e.g. "2017-04-29T13:04:50";
now=$(date +%FT%H:%M:%S)

# previous backup directory
prev=$(ls "$tgt_dir" | grep -e '^....-..-..T..:..:..$' | tail -1);

make_backup() {
    if [[ -z $prev ]]; then
        # initial backup
        eval rsync -av --delete ${exclude} ${src_dir} "$tgt_dir/$now/"
    else
        # incremental backup
        eval rsync -av --delete --link-dest="$tgt_dir/$prev/" ${exclude} ${src_dir} "$tgt_dir/$now/"
    fi
}; make_backup > "${tgt_dir}/.backup.log" 2>&1

# Create statistics
echo -e "\n${now}\t$(du -hs "$tgt_dir/$now")\n" >> "${tgt_dir}/.backup.log"
df -h "$tgt_dir" >> "${tgt_dir}/.backup.log"
exit 0;
